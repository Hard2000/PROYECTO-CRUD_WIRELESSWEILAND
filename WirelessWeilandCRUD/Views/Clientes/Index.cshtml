@model List<Cliente>

<h2 class="text-center">Lista de Clientes</h2>

<!-- Botón para Crear Cliente -->
<div class="mb-3">
    <a asp-action="Create" asp-controller="Clientes" class="btn btn-primary">Crear Cliente</a>
    <a asp-action="GenerarRecibo" asp-controller="Recibos" class="btn btn-success">Generar Recibo</a>
</div>

<!-- Barra de búsqueda -->
<div class="mb-4">
    <input type="text" id="search-client" class="form-control" placeholder="Buscar cliente por nombre..." oninput="searchClient()" />
</div>

<!-- Tabla de clientes -->
<table class="table table-striped table-hover">
    <thead class="table-dark">
        <tr>
            <th>Nombre</th>
            <th>Teléfono</th>
            <th>Plan</th>
            <th>Activo</th>
            <th>Fecha de Inicio</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody id="ResultadosClientes">
        @if (Model.Count == 0)
        {
            <tr>
                <td colspan="6" class="text-center">No hay clientes registrados.</td>
            </tr>
        }
        else
        {
            @foreach (var cliente in Model)
            {
                <tr>
                    <td>@cliente.Nombre</td>
                    <td>@cliente.Telefono</td>
                    <td>@cliente.PlanRenta</td>
                    <td>@(cliente.Activo ? "Activo" : "Inactivo")</td>
                    <td>@cliente.FechaInicio?.ToString("yyyy-MM-dd")</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@cliente.Id" class="btn btn-warning btn-sm">Editar</a>
                        <a asp-action="Delete" asp-route-id="@cliente.Id" class="btn btn-danger btn-sm">Eliminar</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<script>
    async function searchClient() {
        const query = document.getElementById('search-client').value.trim();
        const tableBody = document.getElementById("ResultadosClientes");

        // Si el campo de búsqueda está vacío, obtener todos los clientes
        if (!query) {
            try {
                const response = await fetch(`/Clientes/BuscarClientes?query=`);
                if (!response.ok) {
                    throw new Error("No se pudo obtener la lista de clientes.");
                }

                const clientes = await response.json();
                tableBody.innerHTML = ""; // Limpiar resultados previos

                if (clientes.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No hay clientes registrados.</td></tr>`;
                    return;
                }

                // Generar nuevas filas de la tabla con todos los clientes
                clientes.forEach(cliente => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${cliente.nombre}</td>
                        <td>${cliente.telefono || "N/A"}</td>
                        <td>${cliente.planRenta}</td>
                        <td>${cliente.activo ? "Activo" : "Inactivo"}</td>
                        <td>${cliente.fechaInicio || "N/A"}</td>
                        <td>
                            <a href="/Clientes/Edit/${cliente.id}" class="btn btn-warning btn-sm">Editar</a>
                            <a href="/Clientes/Delete/${cliente.id}" class="btn btn-danger btn-sm">Eliminar</a>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error("Error al obtener todos los clientes:", error);
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error al cargar los clientes. Intente nuevamente.</td></tr>`;
            }
            return;
        }

        // Si hay un texto de búsqueda, realizar la búsqueda dinámica
        try {
            const response = await fetch(`/Clientes/BuscarClientes?query=${encodeURIComponent(query)}`);
            if (!response.ok) {
                throw new Error("No se pudo obtener la lista de clientes.");
            }

            const clientes = await response.json();
            tableBody.innerHTML = ""; // Limpiar resultados previos

            if (clientes.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No se encontraron clientes.</td></tr>`;
                return;
            }

            // Generar nuevas filas de la tabla con los resultados
            clientes.forEach(cliente => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${cliente.nombre}</td>
                    <td>${cliente.telefono || "N/A"}</td>
                    <td>${cliente.planRenta}</td>
                    <td>${cliente.activo ? "Activo" : "Inactivo"}</td>
                    <td>${cliente.fechaInicio || "N/A"}</td>
                    <td>
                        <a href="/Clientes/Edit/${cliente.id}" class="btn btn-warning btn-sm">Editar</a>
                        <a href="/Clientes/Delete/${cliente.id}" class="btn btn-danger btn-sm">Eliminar</a>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        } catch (error) {
            console.error("Error al buscar clientes:", error);
            tableBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error al realizar la búsqueda. Intente nuevamente.</td></tr>`;
        }
    }
</script>


